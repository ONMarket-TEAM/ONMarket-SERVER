name: Zero Downtime Deploy

on:
  push:
    branches: [ develop, main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Set environment and ports
        run: |
          if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
            echo "DEPLOY_PORT=8082" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
            echo "PORT_A=8081" >> $GITHUB_ENV
            echo "PORT_B=8083" >> $GITHUB_ENV
            echo "NGINX_TARGET_PORT=8081" >> $GITHUB_ENV
          fi

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/onmarket-0.0.1-SNAPSHOT.jar"
          target: "/home/ec2-user/"

      - name: Deploy Application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ENV=${{ env.DEPLOY_ENV }}
            
            if [ "$ENV" = "staging" ]; then
              PORT=${{ env.DEPLOY_PORT }}
              echo "Deploying staging on fixed port $PORT"
            
              cp /home/ec2-user/build/libs/onmarket-0.0.1-SNAPSHOT.jar /home/ec2-user/onmarket-staging-new.jar
            
              # 기존 프로세스 종료 없이 새 버전 시작
              cd /home/ec2-user
              nohup java -Dserver.port=$PORT -jar onmarket-staging-new.jar > app-staging-$PORT.log 2>&1 &
              NEW_PID=$!
            
              echo "Performing health check on staging..."
              HEALTH_CHECK_PASSED=false
              for i in {1..60}; do
                sleep 2
                if curl -f http://localhost:$PORT/login > /dev/null 2>&1; then
                  HEALTH_CHECK_PASSED=true
                  break
                fi
              done
            
              if [ "$HEALTH_CHECK_PASSED" = false ]; then
                echo "Staging health check failed."
                kill $NEW_PID 2>/dev/null || true
                exit 1
              fi
            
              echo "Staging deployed successfully on port $PORT (PID: $NEW_PID)"
              echo "$(date): Staging deployed on port $PORT (PID: $NEW_PID)" >> /home/ec2-user/deployment-history.log

            else
              # Production Zero Downtime Deploy
              PORT_A=${{ env.PORT_A }}
              PORT_B=${{ env.PORT_B }}
              NGINX_TARGET=${{ env.NGINX_TARGET_PORT }}
            
              echo "Starting zero downtime deployment for production"
            
              cp /home/ec2-user/build/libs/onmarket-0.0.1-SNAPSHOT.jar /home/ec2-user/onmarket-production-new.jar
            
              CURRENT_PORT=""
              NEW_PORT=""
            
              if pgrep -f "server.port=$PORT_A" > /dev/null; then
                CURRENT_PORT=$PORT_A
                NEW_PORT=$PORT_B
              elif pgrep -f "server.port=$PORT_B" > /dev/null; then
                CURRENT_PORT=$PORT_B
                NEW_PORT=$PORT_A
              else
                NEW_PORT=$PORT_A
              fi
            
              cd /home/ec2-user
              nohup java -Dserver.port=$NEW_PORT -jar onmarket-production-new.jar > app-production-$NEW_PORT.log 2>&1 &
              NEW_PID=$!
            
              echo "Performing health check on port $NEW_PORT..."
              HEALTH_CHECK_PASSED=false
              for i in {1..60}; do
                sleep 2
                if curl -f http://localhost:$NEW_PORT/login > /dev/null 2>&1; then
                  HEALTH_CHECK_PASSED=true
                  break
                fi
              done
            
              if [ "$HEALTH_CHECK_PASSED" = false ]; then
                echo "Health check failed. Rolling back..."
                kill $NEW_PID 2>/dev/null || true
                exit 1
              fi
            
              echo "Updating Nginx to new port $NEW_PORT"
              sudo cp /etc/nginx/conf.d/onmarket.conf /etc/nginx/conf.d/onmarket.conf.backup
              sudo sed -i "s/proxy_pass http:\/\/localhost:[0-9]*/proxy_pass http:\/\/localhost:$NEW_PORT/" /etc/nginx/conf.d/onmarket.conf
              if sudo nginx -t; then
                sudo systemctl reload nginx
              else
                echo "Nginx test failed. Rolling back..."
                sudo cp /etc/nginx/conf.d/onmarket.conf.backup /etc/nginx/conf.d/onmarket.conf
                kill $NEW_PID 2>/dev/null || true
                exit 1
              fi
            
              # 기존 프로세스 종료
              if [ ! -z "$CURRENT_PORT" ]; then
                OLD_PID=$(pgrep -f "server.port=$CURRENT_PORT")
                if [ ! -z "$OLD_PID" ]; then
                  kill -TERM $OLD_PID 2>/dev/null || true
                  sleep 5
                  if kill -0 $OLD_PID 2>/dev/null; then
                    kill -9 $OLD_PID 2>/dev/null || true
                  fi
                fi
              fi
            
              echo "Production deployed successfully on port $NEW_PORT (PID: $NEW_PID)"
              echo "$(date): Production deployed on port $NEW_PORT (PID: $NEW_PID)" >> /home/ec2-user/deployment-history.log
            fi